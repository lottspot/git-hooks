#!/usr/bin/env python2

import os
import sys
import string
import logging
import uuid

from subprocess import Popen, PIPE

#
# This update hook allows the specification of two types of branches:
#
# 1. merge-only branch
# 2. auth-only branch
#
# A merge-only branch is any branch which rejects non-merge commits
# An auth-only branch is any branch which rejects any commit for 
# which a GPG signature cannot be verified.
#
# The plugin utilizes the following git config directives:
#
# hook.<name>.logPath            : (path)     Path to the hook error log file. Uses info/update.log by default
# branch.<name>.enforceMergeOnly : (boolean)  Enforce a merge-only policy on the named branch
# branch.<name>.enforceAuthOnly  : (boolean)  Enforce an auth-only policy on the named branch
# branch.<name>.authGpgHome      : (path)     Directory to use as GNUPGHOME when enforcing auth-only policy on named branch
#

def die(msg):
    sys.stderr.write('%s\n' % msg)
    sys.exit(1)

def internal_error(logmsg):
    #TODO: Add timestamps to logged errors
    errid = uuid.uuid1().get_time_low()
    logging.error('%s: %s' % (errid, logmsg))
    msg = 'Internal error occured. Please report this error to your administrator\nError ID: %s' % errid
    die(msg)

def value_to_bool(value):
    if value == 'true':
        return True
    elif value == 'false':
        return False
    else:
        return None

def cfg_get(key, default=None, astype=''):
    args = [ 'git', 'config', '--get' ]
    if astype:
        args.append('--%s' % astype)
    args.append(key)
    try:
        cmd  = Popen(args, stdout=PIPE, stderr=PIPE)
    except OSError as e:
        internal_error('%s: %s' % (args.join(' '), e.strerror))
    stdout, stderr = cmd.communicate()
    if stderr:
        trmap = string.maketrans('\n', ' ')
        internal_error('error retrieving config key %s: %s' % (key, stderr.translate(trmap)))
    value = stdout.strip()
    if not value:
        value = default
    return value

def commit_is_merge(commit):
    nparents = 0
    args     = ['git', 'cat-file', '-p', commit]
    try:
        cmd = Popen(args, stdout=PIPE, stderr=PIPE)
    except OSError as e:
        internal_error('%s: %s' % (args.join(' '), e.strerror))
    stdout, stderr = cmd.communicate()
    if stderr:
        internal_error('%s: %s' % (args.join(' '), stderr))
    for line in stdout.split('\n'):
        columns = line.split()
        if len(columns) < 1: continue
        if columns[0] == 'parent': nparents += 1
    if nparents > 1:
        return True
    return False

def commit_is_authenticated(commit, auth_home):
    if auth_home:
        os.environ['GNUPGHOME'] = auth_home
    args = [ 'git', 'log', '-n1', '--pretty=%G?', commit]
    try:
        cmd = Popen(args, stdout=PIPE, stderr=PIPE)
    except OSError as e:
        internal_error('%s: %s' % (args.join(' '), e.strerror))
    stdout, stderr = cmd.communicate()
    if stderr:
        internal_error('%s: %s' % (args.join(' '), stderr.strip()))
    stdout = stdout.strip()
    if stdout not in ['G', 'B', 'U', 'N']:
        table = string.maketrans('\n', ' ')
        internal_error('unexpected output: %s' % stdout.translate(table))
    if stdout == 'G':
        return True
    return False

if __name__ == '__main__':
    hookname = os.path.basename(sys.argv[0])
    refname  = sys.argv[1]
    current  = sys.argv[2]
    future   = sys.argv[3]

    # Enforce policy on branches only
    if not refname.startswith('refs/heads/'):
        sys.exit(0)

    # Disable logging prior to opening log file
    logging.disable(logging.CRITICAL)

    log_path   = cfg_get('hook.%s.logpath' % hookname, 'info/update.log', 'path')
    branchname = refname.split('/')[-1]

    try:
        loghandle = logging.FileHandler(log_path)
    except (IOError, OSError) as e:
        loghandle = logging.FileHandler(os.devnull)
    logformat = logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s')
    loghandle.setFormatter(logformat)
    logging.getLogger().addHandler(loghandle)

    # File opened; enable logging
    logging.disable(0)

    merge_only = cfg_get('branch.%s.enforcemergeonly' % branchname, 'false', 'bool')
    auth_only  = cfg_get('branch.%s.enforceauthonly' % branchname, 'false', 'bool')
    auth_home  = cfg_get('branch.%s.authgpghome' % branchname, '', 'path')

    if value_to_bool(merge_only) and not commit_is_merge(future):
        die('Rejected update to %s: this branch enforces a merge-only policy on pushed commits' % refname)
    if value_to_bool(auth_only) and not commit_is_authenticated(future, auth_home):
        die('Rejected update to %s: this branch enforces an authenticated-only policy on pushed commits' % refname)

    sys.exit(0)